/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/AboutUs/': RouteRecordInfo<'/AboutUs/', '/AboutUs', Record<never, never>, Record<never, never>>,
    '/AboutUs/components/CoreValues': RouteRecordInfo<'/AboutUs/components/CoreValues', '/AboutUs/components/CoreValues', Record<never, never>, Record<never, never>>,
    '/AboutUs/components/HeroSection': RouteRecordInfo<'/AboutUs/components/HeroSection', '/AboutUs/components/HeroSection', Record<never, never>, Record<never, never>>,
    '/AboutUs/components/OriginStory': RouteRecordInfo<'/AboutUs/components/OriginStory', '/AboutUs/components/OriginStory', Record<never, never>, Record<never, never>>,
    '/AboutUs/components/OurTeam': RouteRecordInfo<'/AboutUs/components/OurTeam', '/AboutUs/components/OurTeam', Record<never, never>, Record<never, never>>,
    '/AboutUs/components/TargetClients': RouteRecordInfo<'/AboutUs/components/TargetClients', '/AboutUs/components/TargetClients', Record<never, never>, Record<never, never>>,
    '/CaseStudy/': RouteRecordInfo<'/CaseStudy/', '/CaseStudy', Record<never, never>, Record<never, never>>,
    '/CaseStudy/components/AboutProduct': RouteRecordInfo<'/CaseStudy/components/AboutProduct', '/CaseStudy/components/AboutProduct', Record<never, never>, Record<never, never>>,
    '/CaseStudy/components/BusinessChallenges': RouteRecordInfo<'/CaseStudy/components/BusinessChallenges', '/CaseStudy/components/BusinessChallenges', Record<never, never>, Record<never, never>>,
    '/CaseStudy/components/CaseStudySlider': RouteRecordInfo<'/CaseStudy/components/CaseStudySlider', '/CaseStudy/components/CaseStudySlider', Record<never, never>, Record<never, never>>,
    '/CaseStudy/components/CTA': RouteRecordInfo<'/CaseStudy/components/CTA', '/CaseStudy/components/CTA', Record<never, never>, Record<never, never>>,
    '/CaseStudy/components/Header': RouteRecordInfo<'/CaseStudy/components/Header', '/CaseStudy/components/Header', Record<never, never>, Record<never, never>>,
    '/CaseStudy/components/ProductVertices': RouteRecordInfo<'/CaseStudy/components/ProductVertices', '/CaseStudy/components/ProductVertices', Record<never, never>, Record<never, never>>,
    '/CaseStudy/components/ProposedSolutions': RouteRecordInfo<'/CaseStudy/components/ProposedSolutions', '/CaseStudy/components/ProposedSolutions', Record<never, never>, Record<never, never>>,
    '/CaseStudy/components/SimilarCaseStudies': RouteRecordInfo<'/CaseStudy/components/SimilarCaseStudies', '/CaseStudy/components/SimilarCaseStudies', Record<never, never>, Record<never, never>>,
    '/ContactUs/': RouteRecordInfo<'/ContactUs/', '/ContactUs', Record<never, never>, Record<never, never>>,
    '/home/': RouteRecordInfo<'/home/', '/home', Record<never, never>, Record<never, never>>,
    '/home/components/Features': RouteRecordInfo<'/home/components/Features', '/home/components/Features', Record<never, never>, Record<never, never>>,
    '/home/components/Hero': RouteRecordInfo<'/home/components/Hero', '/home/components/Hero', Record<never, never>, Record<never, never>>,
    '/home/components/HeroBanner': RouteRecordInfo<'/home/components/HeroBanner', '/home/components/HeroBanner', Record<never, never>, Record<never, never>>,
    '/home/components/OurClients': RouteRecordInfo<'/home/components/OurClients', '/home/components/OurClients', Record<never, never>, Record<never, never>>,
    '/home/components/Reviews': RouteRecordInfo<'/home/components/Reviews', '/home/components/Reviews', Record<never, never>, Record<never, never>>,
    '/home/components/ServicesSection': RouteRecordInfo<'/home/components/ServicesSection', '/home/components/ServicesSection', Record<never, never>, Record<never, never>>,
    '/home/components/Trust': RouteRecordInfo<'/home/components/Trust', '/home/components/Trust', Record<never, never>, Record<never, never>>,
    '/Portfolio/': RouteRecordInfo<'/Portfolio/', '/Portfolio', Record<never, never>, Record<never, never>>,
    '/Portfolio/components/CtaSection': RouteRecordInfo<'/Portfolio/components/CtaSection', '/Portfolio/components/CtaSection', Record<never, never>, Record<never, never>>,
    '/Portfolio/components/PortfolioFilters': RouteRecordInfo<'/Portfolio/components/PortfolioFilters', '/Portfolio/components/PortfolioFilters', Record<never, never>, Record<never, never>>,
    '/PrivacyPolicy/': RouteRecordInfo<'/PrivacyPolicy/', '/PrivacyPolicy', Record<never, never>, Record<never, never>>,
    '/PrivacyPolicy/components/content': RouteRecordInfo<'/PrivacyPolicy/components/content', '/PrivacyPolicy/components/content', Record<never, never>, Record<never, never>>,
    '/Services/': RouteRecordInfo<'/Services/', '/Services', Record<never, never>, Record<never, never>>,
    '/Services/components/HeroSection': RouteRecordInfo<'/Services/components/HeroSection', '/Services/components/HeroSection', Record<never, never>, Record<never, never>>,
    '/Services/components/ServiceVertices': RouteRecordInfo<'/Services/components/ServiceVertices', '/Services/components/ServiceVertices', Record<never, never>, Record<never, never>>,
    '/ServicesDetails/': RouteRecordInfo<'/ServicesDetails/', '/ServicesDetails', Record<never, never>, Record<never, never>>,
    '/ServicesDetails/components/Description': RouteRecordInfo<'/ServicesDetails/components/Description', '/ServicesDetails/components/Description', Record<never, never>, Record<never, never>>,
    '/ServicesDetails/components/Faqs': RouteRecordInfo<'/ServicesDetails/components/Faqs', '/ServicesDetails/components/Faqs', Record<never, never>, Record<never, never>>,
    '/ServicesDetails/components/Header': RouteRecordInfo<'/ServicesDetails/components/Header', '/ServicesDetails/components/Header', Record<never, never>, Record<never, never>>,
    '/ServicesDetails/components/RecommendedCaseStudies': RouteRecordInfo<'/ServicesDetails/components/RecommendedCaseStudies', '/ServicesDetails/components/RecommendedCaseStudies', Record<never, never>, Record<never, never>>,
    '/ServicesDetails/components/SelectiveServices': RouteRecordInfo<'/ServicesDetails/components/SelectiveServices', '/ServicesDetails/components/SelectiveServices', Record<never, never>, Record<never, never>>,
    '/ServicesDetails/components/Vertices': RouteRecordInfo<'/ServicesDetails/components/Vertices', '/ServicesDetails/components/Vertices', Record<never, never>, Record<never, never>>,
    '/TermsAndConditions/': RouteRecordInfo<'/TermsAndConditions/', '/TermsAndConditions', Record<never, never>, Record<never, never>>,
    '/TermsAndConditions/component/content': RouteRecordInfo<'/TermsAndConditions/component/content', '/TermsAndConditions/component/content', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
